// Code generated by protoc-gen-scratch. DO NOT EDIT.
// versions:
// 	protoc-gen-scratch: v0.5.0
// 	protoc:             (unknown)
// source: gitlab.ozon.ru/newscratch/api/api.proto

//go:generate scratch ast implement --name="Implementation" --service-name="Demo" --source="gitlab.ozon.ru/newscratch/internal/pb/gitlab.ozon.ru/newscratch/api" --service-import-path="gitlab.ozon.ru/newscratch/internal/app/ozon/newscratch"
//go:generate scratch ast update-main --service-name="Demo" --source="gitlab.ozon.ru/newscratch/internal/pb/gitlab.ozon.ru/newscratch/api" --service-import-path="gitlab.ozon.ru/newscratch/internal/app/ozon/newscratch"

package api

import (
	context "context"

	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	_ "embed"
)

//go:embed api.swagger.json
var swaggerJSON []byte

// DemoServiceDesc is description for the DemoServer.
type DemoServiceDesc struct {
	svc DemoServer
	i   grpc.UnaryServerInterceptor
}

func NewDemoServiceDesc(i DemoServer) *DemoServiceDesc {
	return &DemoServiceDesc{svc: i}
}

func (d *DemoServiceDesc) SwaggerDef() []byte {
	return swaggerJSON
}

func (d *DemoServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterDemoServer(s, d.svc)
}

func (d *DemoServiceDesc) RegisterGateway(ctx context.Context, mux *runtime.ServeMux) error {
	if d.i == nil {
		return RegisterDemoHandlerServer(ctx, mux, d.svc)
	}
	return RegisterDemoHandlerServer(ctx, mux, &proxyDemoServer{
		DemoServer:  d.svc,
		interceptor: d.i,
	})
}

// WithHTTPUnaryInterceptor adds GRPC Server Interceptor for HTTP gateway requests. Call again for multiple Interceptors.
func (d *DemoServiceDesc) WithHTTPUnaryInterceptor(u grpc.UnaryServerInterceptor) {
	if d.i == nil {
		d.i = u
	} else {
		d.i = go_grpc_middleware.ChainUnaryServer(d.i, u)
	}
}

type proxyDemoServer struct {
	DemoServer
	interceptor grpc.UnaryServerInterceptor
}

func (p *proxyDemoServer) Ping(ctx context.Context, req *emptypb.Empty) (*Response, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.DemoServer,
		FullMethod: "/ozon.newscratch.Demo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return p.DemoServer.Ping(ctx, req.(*emptypb.Empty))
	}
	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*Response), err
}
